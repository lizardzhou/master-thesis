function [avgTauOut, avgRelVelOut, avgFracWater, outDataComplete, outStart, outEnd] = calcAvgOut(maxNumIter, traj, injectData)
% Calculates mass-flow averaged residence time and relative velocity of
% complete trajectories in the whole drying chamber
% The definition "complete" should be defined by user using maxNumIter 
% Input:
%   maxNumIter: max. # of data points per trajectory, default value from
%   Fluent is 150k and leads to whirling and circling of many trajectories, which
%   should not be considered as complete due to very high residence time. Such
%   trajectories should be excluded by changing maxNumIter to a smaller
%   value (e.g. 10k or 50k)
%   traj: cell containing all trajectories, generated by
%   loadAllTrajectories
%   injectData: diameter and mass flow of injections
% Return:
%   avgTauOut: mass flow-averaged residence time of all complete
%   trajectories
%   avgRelVelOut: mass flow-averaged relative velocity of all complete
%   trajectories
%   outDataComplete: information for calculating average values
%       (:,1) y-coordinate
%       (:,2) particle diameter at start point
%       (:,3) particle diameter at end point
%       (:,4) trajectory mass flow at start point
%       (:,5) single particle mass at start point
%       (:,6) single particle mass at end point
%       (:,7) trajectory mass flow at end point
%       (:,8) residence time at end point
%       (:,9) trajectory # in cell "traj"
%       (:,10) relative velocity of trajectory with # in cell "traj"
%       (:,11) water mass fraction of trajectory with # in cell "traj"
%   outStart: starting point of trajectories
%   outEnd: end point of trajectories

% by Xiye Zhou, Oct. 2021
%% Sort out first point "outStart" and last point "outEnd" of each complete trajectory
fprintf('If treat max # of data points > %g as incomplete: \n', maxNumIter);
outCount = 1; % count the # of complete trajectories
outStart = zeros(size(traj,1),size(traj{1,1},2)); % initialize array for begin of complete trajectories
outEnd = zeros(size(traj,1),size(traj{1,1},2)); % initialize array for end of complete trajectories 
outNum = zeros(1); % initialize array for trajectory # in cell "traj"
for i = 1:size(traj,1)
    if size(traj{i,1},1) < maxNumIter % omit the incomplete trajectory
        outStart(outCount,:) = traj{i,1}(1,:);
        outEnd(outCount,:) = traj{i,1}(end,:);
        outCount = outCount + 1;
        outNum(i,1) = i;
    end
end
outStart = outStart(1:outCount-1,:);
outEnd = outEnd(1:outCount-1,:);
outNumComplete = outNum(outNum ~=0);
fprintf('%g of %g trajectories are complete. \n', size(outStart,1),size(traj,1));
%% Generate array "outDataComplete" for calculating mass flow-averaged values of each complete trajectory
outDataComplete(:,1) = outEnd(:,2);
outDataComplete(:,2) = outStart(:,6);
outDataComplete(:,3) = outEnd(:,6);
for i = 1: size(injectData,1)
    out_idxStartFlow = find( abs(outDataComplete(:,2)-injectData(i,1)) < 1e-8 );
    outDataComplete(out_idxStartFlow,4) = injectData(i,3) * ones(size(out_idxStartFlow,1),1);
end
outDataComplete(:,5) = outStart(:,10);
outDataComplete(:,6) = outEnd(:,10);
outDataComplete(:,7) = outDataComplete(:,6) .* outDataComplete(:,4) ./ outDataComplete(:,5);
outDataComplete(:,8) = outEnd(:,4);
outDataComplete(:,9) = outNumComplete;
%% Calculate mass flow-averaged values of all complete trajectories (throughout the whole spray dryer)
% average residence time
mFlowOut = sum(outDataComplete(:,7));
avgTauOut = sum( outDataComplete(:,8) .* outDataComplete(:,7) / mFlowOut );

% average relative velocity
% calculate via integration of relative velocity over time step for every
% trajectory, then put the value in outDataPSD
for i = 1:size(outDataComplete,1) % loop for the trajectory
    outTimeStep = zeros( size( traj{outDataComplete(i,9)},1 ),1 );
    diffVelX = zeros( size( traj{outDataComplete(i,9)},1 ),1 );
    diffVelY = zeros( size( traj{outDataComplete(i,9)},1 ),1 );
    diffVelZ = zeros( size( traj{outDataComplete(i,9)},1 ),1 );
    relVel = zeros( size( traj{outDataComplete(i,9)},1 ),1 );
    for j = 1:size(outTimeStep,1) % loop for each data point in the trajectory
        outTimeStep(j,1) = traj{outDataComplete(i,9),1}(j,18);
        diffVelX(j,1) = traj{outDataComplete(i,9),1}(j,12) - traj{outDataComplete(i,9),1}(j,15);
        diffVelY(j,1) = traj{outDataComplete(i,9),1}(j,13) - traj{outDataComplete(i,9),1}(j,16);
        diffVelZ(j,1) = traj{outDataComplete(i,9),1}(j,14) - traj{outDataComplete(i,9),1}(j,17);
        relVel(j,1) = sqrt( diffVelX(j,1)^2 + diffVelY(j,1)^2 + diffVelZ(j,1)^2 ); % relative velocity values of each time step
    end
    summandRelVel = relVel(1:end-1) + relVel(2:end); % summand of relVel(n) + relVel(n+1)
    sumIntegral = sum(0.5 * outTimeStep(2:end) .* summandRelVel); % integral: sum of trapezoid area of each time step
    sumTime = sum(outTimeStep); % sum of time steps, is also residence time
    outDataComplete(i,10) = sumIntegral / sumTime;
 end
avgRelVelOut = sum( outDataComplete(:,10) .* outDataComplete(:,7) / mFlowOut );

% water mass fraction
outDataComplete(:,11) = outEnd(:,8);
avgFracWater = sum( outDataComplete(:,11) .* outDataComplete(:,7) / mFlowOut );
%% print out results
fprintf('average residence time of all complete trajectories in whole spray dryer: %.3g s \n', avgTauOut);
fprintf('average relative velocity of all complete trajectories in whole spray dryer: %.3g m/s \n', avgRelVelOut);
fprintf('average water mass fraction of all complete trajectories in whole spray dryer: %.3g \n \n', avgFracWater);
end

