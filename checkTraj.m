function [] = checkTraj(traj, idxTraj, numStream, dInjection, traj_dInjection)  
%Check the trajectory information according to its index in cell "traj"
% Input:
%   traj: cell containing info of all trajectories, generated by loadAllTrajectories.m
%   idxTraj: index of the trajectory in cell "traj"
%   numStream: # of streams per diameter
% % Returns:
% %   d: injection diameter of the trajectory in micron
% %   ID: trajectory ID in Fluent
% %   numPoint: # of data points in the trajectory
% %   completeness: complete or incomplete
% %   out: fine or coarse. If trajectory is complete, no out-value is
% %   returned

% by Xiye Zhou, Oct. 2021   
%% Check input
maxNumIter = 150e3; % maximal number of data points per trajectory
if idxTraj < 1 || idxTraj > size(traj,1)
    error('There are totally %g trajectories. Please enter a number between 1 and %g. \n', size(traj,1), size(traj,1));
end
%% Calculate injection diameter and ID
% list diameters at injection
dClass = zeros(size(traj,1)/numStream,1); % initialize array for diameters at injection
idxClass = 1;
for i = 1:numStream:size(traj,1)-1
    dClass(idxClass,1) = traj{i,1}(1,5);
    idxClass = idxClass + 1;
end
d = dClass(ceil(idxTraj / numStream),1); % injection diameter
dDisp = d * 1e6;  % injection diameter in micron
% trajectory ID in Fluent
if rem(idxTraj, numStream) ~= 0 % remainder of idxTraj in a diameter class
    ID = rem(idxTraj, numStream) - 1; % trajectory ID in Fluent always starts from 0
else
    ID = numStream - 1; % trajectory ID in Fluent always starts from 0
end
%% Calculate # of data points
numPoints = size(traj{idxTraj,1},1);
%% Calculate completeness
if size(traj{idxTraj,1},1) > maxNumIter
    [~, ~, numInTraj] = calcPosIncompleteEnd(d, maxNumIter, dInjection, traj_dInjection); % check if an incomplete trajectory ends at bottom
    if ismember(idxTraj, numInTraj) == 1 % if ends at bottom, it is considered complete
        completeness = 'complete';
    else
        completeness = 'incomplete'; % if doesn't end at bottom, it is considered incomplete
        out = 0;
    end    
else
    completeness = 'complete';
end
%% Calculate the outlet if trajectory is complete
hEnd = traj{idxTraj,1}(end,2);
if strcmp(completeness, 'complete') == 1
    if hEnd < 1e-5 ||  ismember(idxTraj, numInTraj) == 1
        out = 'coarse good';
    else
        out = 'fine good';
    end
end
%% Print results
fprintf('Trajectory %g has injection diameter %g \x03bcm and Fluent ID %g. It is %s with %g data points', ...
    idxTraj, dDisp, ID, completeness, numPoints);
if strcmp(completeness, 'complete') == 1
    fprintf(' and escapes as %s. \n', out);
else
    fprintf('. \n');
end
end
