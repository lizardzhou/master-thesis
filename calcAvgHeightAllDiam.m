function [avgTauAll, avgRelVelAll, avgArray] = calcAvgHeightAllDiam(maxNumIter, traj, hLow, hHigh)
% Calculate mass flow-averaged residence time and relative velocity
% between hLow and hHigh for all diameters
% Based on mass-flow average of values from calcAvgHeight.m
% Input:
%   maxNumIter: maximal number of data points per trajectory
%   traj: cell containing all trajectories, generated by loadAllTrajectories
%   hLow: lower height in meter
%   hHigh: upper height in meter
% Return:
%   avgTauAll: mass flow-averaged resience time of all diameters
%   avgRelVelAll: mass flow-averaged relative velocity
%   avgArray: information for calculating, contains:
%       (:,1) injection diameter
%       (:,2) average residence time of each diameter
%       (:,3) average relative velocity of each diameter
%       (:,4) mass flow of each diameter class

% by Xiye Zhou, Oct. 2021
%% Load injection data
numStream = 25; % # of streams in each diameter class
rawDataInjection = readtable('0-injection.txt','PreserveVariableNames',true);
injectData = table2array(rawDataInjection);
%   (:,1) particle diameter [micron]
%   (:,2) mass flow rate of the whole diameter class [kg/s]
%   (:,3) mass flow rate of each stream [kg/s]
injectData(:,1) = injectData(:,1) * 1e-6; % convert micron to meter
injectData(:,3) = injectData(:,2) / numStream; % mass flow of a single stream in each diameter class
%% Sort trajectories according to injection diameters, only need to run once
[dInjection, traj_dInjection] = sortDiamTraj(numStream, traj);
%% Calculate mass-averaged residence time and relative velocity
avgArray(:,1) = dInjection;
for i = 1:size(dInjection,1)
    [avgArray(i,2), ~, ~, ~, ~] = calcAvgHeight(dInjection(i), maxNumIter, dInjection, traj_dInjection, hLow, hHigh,0);
    [~, ~, ~, avgArray(i,3), ~] = calcAvgHeight(dInjection(i), maxNumIter, dInjection, traj_dInjection, hLow, hHigh,0);
    if isnan(avgArray(i,2)) == 1 % no trajectory in this height interval results in NaN, set this value as 0
        avgArray(i,2) = 0;
        avgArray(i,3) = 0;
    end
end
close all;
avgArray(:,4) = injectData(:,3);
sumFlow = sum(injectData(:,3));
avgTauAll = sum( avgArray(:,2) .* avgArray(:,4) / sumFlow );
avgRelVelAll = sum( avgArray(:,3) .* avgArray(:,4) / sumFlow );
end

